同步与异步？
1.同步: 函数返回立即有结果。
  异步: 函数返回不能立即有结果。

非阻塞？
   js处理i/o通常由事件或者回掉实现。例如等待ajax,扔可以接收输入。

运行时？
   call Stack, Heap, Task Queue

web Api?
通常两类: i/o函数和计时函数
    dom事件, Ajax, setTimeout ......

调用栈：
    function f(b){
      var a = 12;
      return a+b+35;
    }

    function g(x){
      var m = 4;
      return f(m*x);
    }

    g(21);

调用 g 的时候，创建了第一个 堆栈帧 ，包含了 g 的参数和局部变量。
当 g 调用 f 的时候，第二个 堆栈帧 就被创建、并置于第一个 堆栈帧 之上，包含了 f 的参数和局部变量。
当 f 返回时，最上层的 堆栈帧 就出栈了（剩下 g 函数调用的 堆栈帧 ）。当 g 返回的时候，栈就空了。

大体流程：
    主线程执行任务，形成调用栈;
    被触发的异步事件后，如果异步事件有相应的回调函数，该函数被推入任务队列中;
    调用栈栈清空后，读取任务队列中的任务并执行;
    重复以上。

异步编程方法:
    回掉：callbackDemo
    Promise对象:Promise是一个返回值的代理。
               异步方法包含一个原返回值的Promise对象。
               它允许你为异步操作的成功返回值或失败信息指定出路方法。
               Promise:状态：
                pending: 初始状态。
                fulfilled: 成功的操作
                rejected: 失败的操作
                settled: fulfilled or rejected
    Generator:生成器函数, 调用一个生成器函数并不会马上执行它的主体, 而是返回一个这个生成器的迭代器对象。
              生成器对象通常和yield关键字同时使用. 函数执行到每个yield都会中断，并返回yield的右值(通过next方法返回对象中的value字段)。
              下次调用net 函数会从yield的下一个语句继续执行。等到函数执行完，next方法返回的done字段会变成true.

    async/await:async函数就是GeneratorFunction的语法糖。
                await表示这里等待一个Promise返回结果, 再继续执行。
                await后面跟着应该是一个Promise对象。

